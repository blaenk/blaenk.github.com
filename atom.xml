<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jorge Israel Peña]]></title>
  <link href="http://blaenkdenum.com/atom.xml" rel="self"/>
  <link href="http://blaenkdenum.com/"/>
  <updated>2013-03-22T19:35:03-07:00</updated>
  <id>http://blaenkdenum.com/</id>
  <author>
    <name><![CDATA[Jorge Israel Peña]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning ffmpeg]]></title>
    <link href="http://blaenkdenum.com/posts/learning-ffmpeg/"/>
    <updated>2013-03-17T17:40:00-07:00</updated>
    <id>http://blaenkdenum.com/posts/learning-ffmpeg</id>
    <content type="html"><![CDATA[<p>I’ve been trying to understand <a href="http://www.ffmpeg.org/">ffmpeg</a> enough to use for decoding audio in a personal application I’m working on. Documentation and resources to learn it are a bit low and inconsistent or usually outdated. Here I try to maintain a list of resources and information I’ve learned about the library.</p>

<p>These notes will be updated as I learn more about ffmpeg.</p>

<h3 id="resources">Resources</h3>

<p>A problem I’ve encountered with ffmpeg is that many articles posted about it or open source found online is already outdated. Many modern applications like <a href="http://mpc-hc.org/">MPC-HC</a> and <a href="http://www.chromium.org/Home">Chromium</a> do seem to use the latest version of the APIs. I also quickly learned that most learning is done through looking at the examples in ffmpeg as well as the ffplay source.</p>

<ul>
  <li>the updated version of the <a href="http://dranger.com/ffmpeg/">ffmpeg tutorial</a> hosted <a href="https://github.com/chelyaev/ffmpeg-tutorial/blob/master/tutorial03.c#L114">here</a></li>
  <li>the <a href="https://github.com/FFmpeg/FFmpeg/blob/master/ffplay.c#L2133"><code>ffplay.c</code></a> source</li>
  <li>the ffmpeg <a href="https://github.com/FFmpeg/FFmpeg/tree/master/doc/examples">examples</a></li>
  <li>a <a href="http://www.gamedev.net/topic/624876-how-to-read-an-audio-file-with-ffmpeg-in-c/#entry4940299">post</a> on gamedev</li>
  <li>the <a href="https://github.com/mpc-hc/mpc-hc/blob/master/src/filters/transform/MpaDecFilter/FFAudioDecoder.cpp#L295">mpc-hc</a> source</li>
  <li>the <a href="http://src.chromium.org/svn/trunk/src/media/filters/audio_file_reader.cc">chromium source</a></li>
</ul>

<p>One particular thing about decoding audio is that it is generally decoded to a format that was used during the encoding process. This could be PCM Float Planar format for example, where each sample is a float and each channel is stored in a separate buffer. However, when you want to use the audio or play it through speakers, sometimes the format required can differ from the format decoded to. Fortunately ffmpeg has <a href="http://ffmpeg.org/libswresample.html">libswresample</a> which can make these conversions easy. There also exists an abstraction of this using <a href="http://ffmpeg.org/libavfilter.html">libavfilter</a>.</p>

<ul>
  <li>commit <a href="https://github.com/FFmpeg/FFmpeg/commit/e96175ad7b576ad57b83d399193ef10b2bb016ae"><code>e96175ad</code></a> that adds avfilter support to ffplay</li>
  <li>libswresample’s <a href="https://github.com/FFmpeg/FFmpeg/blob/master/doc/examples/resampling_audio.c">resampling audio</a> example</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Linux Programming Interface: Directories and Links]]></title>
    <link href="http://blaenkdenum.com/posts/the-linux-programming-interface-directories-and-links/"/>
    <updated>2013-03-06T17:40:00-08:00</updated>
    <id>http://blaenkdenum.com/posts/the-linux-programming-interface-directories-and-links</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#directories">Directories</a></li>
  <li><a href="#hard-links">Hard Links</a>    <ul>
      <li><a href="#shared-pointers">Shared Pointers</a></li>
      <li><a href="#temporary-files">Temporary Files</a></li>
    </ul>
  </li>
  <li><a href="#symbolic-links">Symbolic Links</a></li>
  <li><a href="#directory-streams">Directory Streams</a></li>
  <li><a href="#working-directories">Working Directories</a></li>
  <li><a href="#root-directories">Root Directories</a></li>
</ul>

<p>Notes for chapter 18 concerning directories and links.</p>

<h2 id="directories">Directories</h2>

<p>Stored in the file system as a regular file except:</p>

<ol>
  <li>marked differently in its i-node entry</li>
  <li>data content is a table mapping filenames to i-node numbers</li>
</ol>

<h2 id="hard-links">Hard Links</h2>

<p>Hard links are also referred to simply as ‘links’. It is soft links which require additional qualification. Links can be created using the <code>ln</code> command which is often used to instead create soft (symbolic) links (<code>ln -s</code>). Creating a hard link to a file doesn’t copy (<code>cp</code>) the file itself, instead it creates a different filename pointing to the same i-node number and also increases the ‘link count’ of the file. This can be verified by running <code>ls -li</code> to see each file’s corresponding i-node number and link count.</p>

<p>Hard links can’t be made to directories, thereby preventing circular links. The book recounts how early UNIX implementations did allow this in order to facilitate directory creation. <a href="http://man7.org/linux/man-pages/man2/mkdir.2.html"><code>mkdir</code></a> didn’t exist, so directories were created with <a href="http://man7.org/linux/man-pages/man2/mknod.2.html"><code>mknod</code></a> and then links were made for <code>.</code> and <code>..</code> to facilitate directory traversal. It also reminds the reader that ‘links to directories’ are more or less possible with bind mounts.</p>

<h3 id="shared-pointers">Shared Pointers</h3>

<p>Hard links remind me of <a href="http://en.cppreference.com/w/cpp/memory/shared_ptr"><code>shared_ptr</code></a> in C++11. I can imagine a scenario in which different processes need access to a common file but the common file needs to be deleted when all processes are finished with it. They can create a link to the file and use that to do their work, since it will be the same file as the original. When they are finished with the file, they can <a href="http://man7.org/linux/man-pages/man2/unlink.2.html"><code>unlink</code></a> – remove the link – to the file. The file system will automatically delete the file itself when the number of links has reached zero. I don’t know if this is common – or even a correct – practice, nevertheless I immediately thought of this when I came across links.</p>

<h3 id="temporary-files">Temporary Files</h3>

<p>A trick in the spirit of the above is touched upon by the book. It talks about how a program might sometimes create a file, <code>unlink</code> it immediately, and then continue using the file knowing that the file will be destroyed 1) explicitly when the file descriptor is closed or 2) implicitly when the program closes. This is what <a href="http://man7.org/linux/man-pages/man3/tmpfile.3.html"><code>tmpfile</code></a> does.</p>

<h2 id="symbolic-links">Symbolic Links</h2>

<p>Also known as soft links, these types of links are more commonly used by people. They simply consist of the <code>type</code> i-node field being set to <code>symlink</code> and the data blocks of the i-node set to the target path.</p>

<p>An interesting note discussed by the book is that some UNIX file systems (such as ext2, ext3, and ext4) perform an optimization where, if the target path can fit in the part of the i-node that would normally be used for data-block pointers, the path is simply stored there instead of externally. In the case of the author, the ext filesystems appropriate 60 bytes to the data-block pointers. Analysis of his system showed that of the 20,070 symbolic links, 97% were 60 bytes or smaller.</p>

<h2 id="directory-streams">Directory Streams</h2>

<p>Directory entries can be enumerated by getting a directory stream handle with <a href="http://man7.org/linux/man-pages/man3/opendir.3.html"><code>opendir</code></a> (or <code>fdopendir</code> to avoid certain race conditions) and pulling directory entries <code>dirent</code> from the directory stream with <a href="http://man7.org/linux/man-pages/man2/readdir.2.html"><code>readdir</code></a>.</p>

<p>Additionally, recursive file tree walking can be achieved using <a href="http://man7.org/linux/man-pages/man3/ftw.3.html"><code>nftw</code></a> (new file tree walking) by passing it a callback to call on every entry.</p>

<h2 id="working-directories">Working Directories</h2>

<p>The working directory (<a href="http://man7.org/linux/man-pages/man3/getcwd.3.html"><code>getcwd</code></a>) of a process determines the reference point from which to resolve relative pathnames within the process. For example if the working directory is <code>/home/user</code> then a a file path of <code>../user2</code> will refer to <code>/home/user2</code>. Simple stuff. The working directory can be changed with <a href="http://man7.org/linux/man-pages/man2/chdir.2.html"><code>chdir</code></a> and <code>fchdir</code>.</p>

<p>Aside from this, Linux (&gt; 2.6.16) provides various <code>*at()</code> calls, such as <a href="http://man7.org/linux/man-pages/man2/openat.2.html"><code>openat</code></a>, which operate relative to a directory file descriptor. These calls (now part of SuSv4) help avoid certain race conditions and help facilitate an idea of “virtual working directories” which is particularly useful in multithreaded applications since every thread shares the working directory attribute of the process.</p>

<h2 id="root-directories">Root Directories</h2>

<p>Every process also has a root directory which serves as the reference point from which to resolve <em>absolute</em> pathnames (as opposed to relative pathnames with working directories). This is usually <code>/</code>, but can be changed with <a href="http://man7.org/linux/man-pages/man2/chroot.2.html"><code>chroot</code></a>, which is often used to create so called “chroot jails”, something FTP servers might do to limit a user’s filesystem exposure to their home directory.  One thing to remember to do is to change the working directory to the chrooted path, in effect “stepping into the jail.” Otherwise the user is able to continue roaming around outside the jail.</p>

<p>chroot jails aren’t a silver bullet. Some BSD derivatives provide a systemcall, <a href="http://www.freebsd.org/cgi/man.cgi?query=jail&amp;apropos=0&amp;sektion=2&amp;manpath=FreeBSD+9.1-RELEASE&amp;arch=default&amp;format=html"><code>jail</code></a>, that handles various edge cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XMonad Ignores Bindings]]></title>
    <link href="http://blaenkdenum.com/posts/xmonad-ignores-bindings/"/>
    <updated>2013-02-24T22:25:00-08:00</updated>
    <id>http://blaenkdenum.com/posts/xmonad-ignores-bindings</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#media-keys">Media Keys</a></li>
  <li><a href="#binding">Binding</a></li>
  <li><a href="#the-problem">The Problem</a></li>
  <li><a href="#bug-hunting">Bug Hunting</a></li>
  <li><a href="#workaround">Workaround</a></li>
  <li><a href="#bug-report">Bug Report</a></li>
</ul>

<p><strong>Disclaimer</strong>: This post is titled to make it easy for people who are experiencing the same problem to find this post. XMonad does <em>not</em> ignore <em>all</em> bindings.</p>

<p>In my <a href="http://blaenkdenum.com/posts/terminal-customization/">previous post</a> I talked about how I spent a while configuring my system, specifically urxvt and zsh, in preparation for setting up <a href="http://xmonad.org">XMonad</a>. I’ve finally gotten around to setting up XMonad. One problem in particular stopped me from continuing with the rest of the configuration.</p>

<h2 id="media-keys">Media Keys</h2>

<p>I have a regular keyboard layout, <a href="http://www.daskeyboard.com/model-s-ultimate/">Das Keyboard Model S Ultimate</a>, which lacks media keys (i.e. volume up, down, etc). This wasn’t too much of a problem when I used headsets because most of them have dedicated volume controls. However, I got tired of headsets being rendered useless when any little thing messed up (e.g. microphone, a speaker, etc).</p>

<p>As a result I ended up buying a <a href="http://amzn.com/B00029MTMQ">cheap standalone mic</a> and now use my iPhone’s <a href="http://amzn.com/B004PNZFZ8">Shure SE215-K</a> earbuds for sound on my computer. This is very easy to do given my computer case’ front panel audio connector. Of course, the problem now is that there aren’t any dedicated media keys and having to use a GUI to change the volume is cumbersome.</p>

<p>My solution to this problem in Windows and Mac is to bind the bottom right keys to media keys as follows:</p>

<ul>
  <li>Right Control → Volume Up</li>
  <li>Menu Key → Volume Down</li>
  <li>Right Windows Key → Volume Mute</li>
</ul>

<h2 id="binding">Binding</h2>

<p>Creating these binds is possible on Windows via a registry hack, facilitated using a program such as <a href="http://www.randyrants.com/sharpkeys/">SharpKeys</a>.</p>

<p>On Linux I initially did this using <code>xmodmap</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">remove Control = Control_R
</span><span class="line">keycode 105 = XF86AudioRaiseVolume
</span><span class="line">add Control = Control_R
</span><span class="line">
</span><span class="line">keycode 135 = XF86AudioLowerVolume
</span><span class="line">
</span><span class="line">remove mod4 = Super_R
</span><span class="line">keycode 134 = XF86AudioMute
</span><span class="line">add mod4 = Super_R</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Binding to these <code>XF86Audio*</code> keys automatically adds support for these keys in different applications like <a href="http://www.mplayer2.org/">mplayer2</a>, but I wanted system-wide volume support. This is typically accomplished by wiring them up in your given Desktop Environment or Window Manager. So I went ahead and did so in <code>xmonad.hs</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="n">xF86XK_AudioMute</span><span class="p">),</span> <span class="n">spawn</span> <span class="s">&quot;amixer -q set Master,0 toggle&quot;</span><span class="p">),</span>
</span><span class="line"><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="n">xF86XK_AudioLowerVolume</span><span class="p">),</span> <span class="n">spawn</span> <span class="s">&quot;amixer -q set Master,0 5%- unmute&quot;</span><span class="p">),</span>
</span><span class="line"><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="n">xF86XK_AudioRaiseVolume</span><span class="p">),</span> <span class="n">spawn</span> <span class="s">&quot;amixer -q set Master,0 5%+ unmute&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-problem">The Problem</h2>

<p>The problem was that XMonad would only react to the Right Control key (Volume Up). However, <code>xev</code> correctly interpreted the keys as having been bound to the <code>XF86Audio*</code> keys. I was really confused as to why the binds apparently did work at the system level but only one of them worked at the window manager level.</p>

<p>To rule out that it wasn’t something with the system-level (xmodmap) binds, I decided to check if it worked in <a href="http://awesome.naquadah.org/">Awesome</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({},</span> <span class="s2">&quot;</span><span class="s">XF86AudioLowerVolume&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">amixer -q set Master,0 5%- unmute&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class="line"><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({},</span> <span class="s2">&quot;</span><span class="s">XF86AudioRaiseVolume&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">amixer -q set Master,0 5%+ unmute&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class="line"><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({},</span> <span class="s2">&quot;</span><span class="s">XF86AudioMute&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">amixer set Master,0 toggle&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Indeed it worked perfectly. So now I had narrowed down the problem to XMonad.</p>

<h2 id="bug-hunting">Bug Hunting</h2>

<p>Eventually I decided to stop by <code>#xmonad</code> on freenode. There I found Paul Fertser who spent the next ~6 hours helping me track down what he figured to be a bug in XMonad. I told him that the system-level binds did work, but not in XMonad. I showed him my binds using <code>xmodmap -pke</code>.</p>

<p>He noticed that the <code>XF86Audio*</code> keys were bound twice: once by default by XKB (<code>xmodmap</code>’s more modern replacement) bound to the keycodes I would have if my keyboard had media keys, and bound again to the keys I chose (the bottom right keys). He then hypothesized that XMonad wasn’t grabbing the keys at all due to Xlib limitations. Specifically, the <code>XKeysymToKeycode</code> function only returns one keycode per key, biased towards lower keycodes, presumably due to an increasing iterative search of the keycodes for a match.</p>

<p>This theory accounted for why the Right Control (Volume Up) bind did work and not the others. What happened was that Right Control’s keycode was lower than the duplicate bind’s keycode. As a result, when XMonad used <code>XKeysymToKeycode</code> it retrieved the correct keycode. The other two binds, however, have higher keycodes than the default-bound ones, and so <code>XKeysymToKeycode</code> returned the first (lower) keycode it found and as a result XMonad never even knew of the other binds’ existence.</p>

<p>To test this theory, Paul had me run <a href="http://en.wikipedia.org/wiki/Ltrace"><code>ltrace</code></a> on XMonad to see which keys XMonad grabbed. The output of this clearly showed that XMonad only grabbed the keys with the lower keycodes.</p>

<h2 id="workaround">Workaround</h2>

<p>Now that we were pretty sure of the cause of this, the workaround was to remove the other keycodes (for keys I didn’t even have on my keyboard). At this time I decided I might as well switch over to XKB. The first order of business was to <a href="http://unix.stackexchange.com/a/65600/10163">dump my XKB map</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>setxkbmap -print &gt; ~/.xkb/keymap/mymap
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then I created a <code>~/.xkb/symbols/volume_keys</code> file to store my media key binds. It took me a long while to figure out how to remove/unbind the default-bound keys. One problem was that XKB sets different aliases for keys. For example, <code>&lt;I0D&gt;</code> (I guess that’s a media key) was aliased to <code>&lt;MUTE&gt;</code>. I looked around in <code>/usr/share/X11/xkb/rules/evdev</code> to see what was aliased and made sure to unbind those too. As for unbinding, at first Paul suggested to bind the keys to <code>NoSymbol</code> but that apparently had no effect. Eventually I found out it was possible with <a href="http://madduck.net/docs/extending-xkb/#attaching_symbols_to_keys"><code>VoidSymbol</code></a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">partial modifier_keys
</span><span class="line">xkb_symbols "volume_keys" {
</span><span class="line">  // mute
</span><span class="line">  replace key &lt;MUTE&gt; { [ VoidSymbol ] };
</span><span class="line">  replace key &lt;I0D&gt; { [ VoidSymbol ] };
</span><span class="line">
</span><span class="line">  // lower volume
</span><span class="line">  replace key &lt;VOL-&gt; { [ VoidSymbol ] };
</span><span class="line">  replace key &lt;I0E&gt; { [ VoidSymbol ] };
</span><span class="line">
</span><span class="line">  // raise volume
</span><span class="line">  replace key &lt;VOL+&gt; { [ VoidSymbol ] };
</span><span class="line">  replace key &lt;I0F&gt; { [ VoidSymbol ] };
</span><span class="line">
</span><span class="line">  replace key &lt;RCTL&gt; { [ XF86AudioRaiseVolume ] };
</span><span class="line">  replace key &lt;MENU&gt; { [ XF86AudioLowerVolume ] };
</span><span class="line">  replace key &lt;RWIN&gt; { [ XF86AudioMute ] };
</span><span class="line">  replace key &lt;RALT&gt; { [ Multi_key ] };
</span><span class="line">};</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now I loaded my XKB map in <code>~/.xinitrc</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">xkbcomp -I<span class="nv">$HOME</span>/.xkb ~/.xkb/keymap/mymap <span class="nv">$DISPLAY</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I restarted XMonad with <code>Mod-Shift-Q</code> (so that <code>~/.xinitrc</code> is rerun) and everything now worked perfectly.</p>

<h2 id="bug-report">Bug Report</h2>

<p>Over the course of my transition to XKB, Paul found that there was already <a href="https://code.google.com/p/xmonad/issues/detail?id=273">an issue</a> opened back in 2009 concerning this. The issue report has a patch attached that fixes this, but the patch has yet to be applied to XMonad. Paul suggested I try the patch myself and communicate my results back to the issue report. So I went ahead and got XMonad and XMonadContrib from the darcs repository, ran a simple <code>darcs apply keycode.dpatch</code>, and installed each with a <code>--prefix</code> to prevent clashing with the ones already installed with pacman. Indeed, the patch worked perfectly.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminal Customization]]></title>
    <link href="http://blaenkdenum.com/posts/terminal-customization/"/>
    <updated>2013-02-12T04:33:00-08:00</updated>
    <id>http://blaenkdenum.com/posts/terminal-customization</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#dotfiles">dotfiles</a></li>
  <li><a href="#urxvt">urxvt</a>    <ul>
      <li><a href="#colors">Colors</a></li>
      <li><a href="#clipboard">Clipboard</a></li>
    </ul>
  </li>
  <li><a href="#zsh">zsh</a>    <ul>
      <li><a href="#prompt">Prompt</a></li>
      <li><a href="#vi-binds">vi-Binds</a></li>
      <li><a href="#highlighting">Highlighting</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<p>A while back I switched over to <a href="http://en.wikipedia.org/wiki/Z_shell">zsh</a> as my shell and used <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> to get up and running quickly. I barely used any of the features it provided, so I recently decided to do away with it and get zsh setup from scratch. At the same time I decided it’d be a good idea to do the same for <a href="http://en.wikipedia.org/wiki/Rxvt-unicode">urxvt</a>. These initiatives had the consequence that I ended up completely redoing the way I maintained my dotfiles which had the effect of greatly improving my overall setup.</p>

<p>Before I go any further I’d like to point out that all of the things that I’ll talk about in this post are available in my <a href="https://github.com/blaenk/dots">dotfiles</a> repository. I’ll make an effort to link to the relevant individual files from the repository for each topic I cover. Here is the end result:</p>

<p><img class="center" src="http://blaenkdenum.com/images/terminal/urxvt.png" /></p>

<h2 id="dotfiles">dotfiles</h2>

<p>I previously had a simple Rakefile that symlinked all of the files in the dotfiles directory into my home directory, except for some in an exception list. However, this had the consequence that I had to have ruby installed beforehand, and I didn’t like to install ruby through means other than something like <a href="https://github.com/sstephenson/rbenv/">rbenv</a>. I preferred instead to be able to get my dotfiles up and running as soon as possible on a new system. As a result I opted to use a shell script to deploy my dotfiles.</p>

<p>After looking around in dotfile repositories I found <a href="https://github.com/holman/dotfiles/blob/master/script/bootstrap">hoffman’s bootstrap script</a>. The simple script uses <code>find</code> to find files and directories whose names end in “.ln” and symlinks them into the home directory. I modified it a bit to use the “.ln” suffix instead of “.symlink” – purely cosmetic of course – as well as some other slight changes. I think I’ll change it later so that it can gracefully handle operating system-dependent dotfiles.</p>

<h2 id="urxvt">urxvt</h2>

<p>My first goal was to get urxvt configured properly. I really didn’t like the way stock urxvt looked and operated (e.g. clipboard use), so I set out to learn its configuration format. I ended up defining my own color scheme as well as improving its clipboard support.</p>

<h3 id="colors">Colors</h3>

<p>I initially attempted to replicate the color scheme I used in the OS X terminal, however I found that the very same colors didn’t look quite the same in the terminals I tried on Linux (GNOME’s or urxvt). I have an IPS monitor which I think has made me pretty sensitive to color. As a result I decided to tweak it a little, and I feel that I’ve come up with an even better color scheme than before by taking some of the colors from my <a href="https://github.com/blaenk/dots/blob/master/vim/vim.ln/colors/blaenk.vim">vim theme</a>.</p>

<p>I’ve come to recognize recently that it’s pretty easy to go overboard with the amount of colors used in anything, and that oftentimes things tend to look better with a more restricted color palette. My terminal uses more color than your common terminal or prompt, but I think it’s all in good taste and for semantic purposes. In fact, I’ve come to really like the <a href="https://github.com/blaenk/dots/blob/master/X11/Xresources.ln#L40">color scheme I chose</a>, it somehow reminds me of SNES game color palettes.</p>

<h3 id="clipboard">Clipboard</h3>

<p>Stock urxvt uses the <a href="http://en.wikipedia.org/wiki/X_Window_selection">X Window Selection</a> copy and paste mechanism. Paste can be done by middle clicking, and copying is on-select. I found a <a href="https://github.com/muennich/urxvt-perls">set of scripts</a> that take the copy and paste system from barebones to awesome.</p>

<p>The <code>clipboard</code> script allows me to copy and paste using the Alt-keys, as in OS X where one can use the Cmd-keys to copy and paste. These are some nice binds to use without interfering with the terminal by sending signals to the current program.</p>

<p>The <code>keyboard-select</code> script allows me to go into “visual mode” on the terminal and use vi-bindings to do my copying. This lets me copy text from the terminal without having to leave the keyboard. This paired with my zsh vi-bindings means I never have to leave the home row.</p>

<h2 id="zsh">zsh</h2>

<p>This was the bulk of the work, but I quickly realized that it wasn’t all that difficult. I didn’t want to have one huge zshrc file. Instead I wanted to have specific files for different parts of the configuration, for example <code>prompt.zsh</code> would contain configuration for the prompt. I had seen such systems in oh-my-zsh as well as certain peoples’ dotfile repositories. I took inspiration from <a href="https://github.com/sunaku/home">sunaku’s dotfiles</a> in which he has a zsh file that sources all of the zsh files in a directory.</p>

<h3 id="prompt">Prompt</h3>

<p>My zsh prompt is actually pretty simple. I played around with multiline prompts but I really disliked the feel of them. The zsh file dedicated to <a href="https://github.com/blaenk/dots/blob/master/zsh/zsh/prompt.zsh">defining the prompt</a> is very clean in my opinion, which is something I strived for throughout its development.</p>

<h4 id="basic">Basic</h4>

<p>The basic prompt consists of a lambda followed by the path (which <a href="http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/#current-directory">auto-collapses</a> <code>$HOME</code> to <code>~</code>) with <a href="http://superuser.com/questions/49092/how-to-format-the-path-in-a-zsh-prompt">highlighted path separators</a> followed by a right arrow. Pretty simple and easy on the colors in my opinion, aside from the unconventional highlighting of the path separators, which was something I had long wanted and took me a while to get right.</p>

<p>My prompt is inspired by the Haskell <a href="http://www.haskell.org/haskellwiki/Lambda_abstraction">lambda syntax</a> so that it looks like every line is a lambda operating on the current directory whose code is the command you type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">\</span><span class="n">dir</span> <span class="ow">-&gt;</span> <span class="n">command_in</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here’s what the actual prompt looks like:</p>

<p><img class="center" src="http://blaenkdenum.com/images/terminal/basic-prompt.png" /></p>

<p>Here it is in text:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">λ ~/code/haskell ➜</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="git">git</h4>

<p>Like any self-respecting modern prompt, mine <a href="https://github.com/blaenk/dots/blob/master/zsh/zsh/vcsinfo.zsh">incorporates git information</a> when within a git repository. It shows the current branch, whether there are any untracked files (denoted by <code>.</code>), modified files (denoted by <code>#</code>), or staged files (denoted by <code>+</code>). Another nice little thing I added was a marker for how far ahead and/or behind we are from the remote branch. This is appended to the aforementioned information and only shows up when we <em>are</em> ahead or behind.</p>

<p>All of these features were done using zsh’s <a href="http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information">vcsinfo</a> with the help of <a href="http://arjanvandergaag.nl/blog/customize-zsh-prompt-with-vcs-info.html">Arjan van der Gaag</a> and – once again – <a href="https://github.com/sunaku/home/blob/master/.zsh/config/prompt.zsh">sunaku</a>. Here’s what it looks like <sup id="fnref:echo"><a href="#fn:echo" rel="footnote">1</a></sup>:</p>

<p><img class="center" src="http://blaenkdenum.com/images/terminal/git-prompt.png" /></p>

<p>Again in text:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">λ ~/.dots (master . # +){+1} ➜ </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The branch is <code>master</code> and apparently there’s unstaged files, modifed files, and staged files. Furthermore, the <code>{+1}</code> shows that my branch is one commit ahead of the remote branch. It would also show the number of commits we are behind – in red – if that were the case, which in my opinion can be very handy so that you can avoid conflicts by rebasing or merging before you push. This segment only shows up if either of those conditions is met.</p>

<h4 id="ssh">SSH</h4>

<p>The prompt also detects if it’s being viewed through SSH. I don’t like viewing hostname in my prompt on machines I’m on locally as I feel it’s pointless. However, when I’m connected to a remote server via SSH, it’s often handy to have the hostname around to differentiate between your computer and the remote host. For this reason my prompt only shows the hostname when it detects that it’s being viewed through an SSH connection. Here’s what it looks like:</p>

<p><img class="center" src="http://blaenkdenum.com/images/terminal/ssh-prompt.png" /></p>

<p>Once again in text:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[someserver] λ ~/.dots (master) ➜ </span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="vi-binds">vi-Binds</h3>

<p>One thing that I can’t live without now when using vi-bindings is binding <code>jj</code> to vi-mode. The default key for this is Escape, but Escape is <a href="http://unix.stackexchange.com/questions/23138/esc-key-causes-a-small-delay-in-terminal-due-to-its-alt-behavior">used for other hotkeys</a> that the terminal (or shell?) intercepts. For this reason, a single keypress of Escape introduces a bit of lag, which I imagine is required to differentiate a hotkey (i.e. <code>Esc-C</code>) from a simple Escape keypress.</p>

<p>Binding to <code>jj</code> has the consequence of being more accessible. In fact, this is a common bind that people tend to use in vim for this very reason. Before coming to this realization I mainly used Emacs-binds because they didn’t introduce lag. However, with this new bind I’m able to jump into vi-mode and edit commands very quickly and more intuitively (for a vim user like myself).</p>

<h3 id="highlighting">Highlighting</h3>

<p>If you’ve been wondering how it is that my commands are highlighted, it’s made possible by <a href="https://github.com/zsh-users/zsh-syntax-highlighting">this highlighting script</a>. Simply sourcing that script into your zsh environment suddenly colors your commands. In my opinion it makes the terminal look much better without going overboard with the colors. I did have to <a href="https://github.com/blaenk/dots/blob/master/zsh/zsh/highlight.zsh">tweak some settings</a> though because I felt that the default configuration did go a bit overboard on the styling, such as underlining program names.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I have to say that I love the way my terminal looks and operates now. This has all been in preparation for setting up <a href="http://en.wikipedia.org/wiki/Xmonad">Xmonad</a>, which I intend to take a shot at soon. For the curious, I’m doing all of this on <a href="http://www.archlinux.org/">arch linux</a>, but I didn’t say it earlier because nothing in this post depends on this. In fact, none of the content in this post is all that specific to Linux itself even. I’ll try to update this post whenever my setup changes, but I think I’m quite comfortable with the way it is – and will be – for the foreseeable future.</p>

<p>In my opinion, the benefit of using such tried and proven, mature tools is that once you take the time to configure them to your liking you can use them without modification for a long time. Barring some imminent, majorly disruptive paradigm shift in software development, I can see myself using many of these tools throughout my career as a software developer.</p>

<div class="footnotes">
  <ol>
    <li id="fn:echo">
      <p>Ignore the <code>echo</code> command. I used it to give the current line some padding to make taking a screenshot a little bit easier.<a href="#fnref:echo" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naive Convolution in Haskell]]></title>
    <link href="http://blaenkdenum.com/posts/naive-convolution-in-haskell/"/>
    <updated>2013-01-04T18:21:00-08:00</updated>
    <id>http://blaenkdenum.com/posts/naive-convolution-in-haskell</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#principle">Principle</a></li>
  <li><a href="#definition">Definition</a>    <ul>
      <li><a href="#convolution-machine">Convolution Machine</a></li>
    </ul>
  </li>
  <li><a href="#implementation">Implementation</a>    <ul>
      <li><a href="#padding">Padding</a></li>
      <li><a href="#lets-roll">Let’s Roll</a></li>
    </ul>
  </li>
  <li><a href="#reduction">Reduction</a></li>
  <li><a href="#parallelization">Parallelization</a>    <ul>
      <li><a href="#parmap">parMap</a></li>
      <li><a href="#benchmark">Benchmark</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a>    <ul>
      <li><a href="#imperative-approach">Imperative Approach</a></li>
      <li><a href="#optimizations">Optimizations</a></li>
    </ul>
  </li>
</ul>

<p><a href="http://en.wikipedia.org/wiki/Convolution">Convolution</a> is a mathematical method of combining two signals to form a third signal. Passing the <a href="http://en.wikipedia.org/wiki/Dirac_delta_function">Dirac delta function</a> (unit impulse) <script type="math/tex">\delta[n]</script> through a linear system results in the impulse response <script type="math/tex">h[n]</script>. The impulse response is simply the signal resulting from passing the unit impulse (Dirac delta function) through a linear system.</p>

<h2 id="principle">Principle</h2>

<p>The properties of <a href="http://www.cns.nyu.edu/~david/handouts/linear-systems/linear-systems.html">homogeneity</a> and <a href="http://en.wikipedia.org/wiki/Shift-invariant_system">shift-invariance</a> in <a href="http://en.wikipedia.org/wiki/LTI_system_theory">Linear Time-Invariant System Theory</a> holds that scaling and shifting the input results in the same scaling and shifting in the output. Because of these properties, we can represent any impulse as a shifted and scaled delta function and consequently know what the impulse response will be for that scaled and shifted impulse.</p>

<p>An impulse of <script type="math/tex">-3</script> at the <script type="math/tex">8^{th}</script> sample would be represented as a unit impulse by scaling the delta function by <script type="math/tex">-3</script> and shifting it to the right by <script type="math/tex">8</script> samples: <script type="math/tex">-3\delta[n-8]</script>, where <script type="math/tex">n-8</script> means the <script type="math/tex">8^{th}</script> sample is now the <script type="math/tex">0^{th}</script>. Due to homogeneity and shift invariance, we can determine the impulse response of this impulse by simply scaling and shifting the unit impulse response in the same manner. In other words:</p>

<script type="math/tex; mode=display">-3\delta[n-8] \mapsto -3h[n-8]</script>

<p>What this means is that if we know the unit impulse response of a system, we consequently know how the system will react to <em>any</em> impulse. These impulse responses can then be synthesized to form the output signal that would result from running the input signal through the actual system.</p>

<p>In short, the input signal <em>convolved</em> with the unit impulse response results in the output signal. Convolution of input signal <script type="math/tex">x[n]</script> with unit impulse <script type="math/tex">h[n]</script> to generate output signal <script type="math/tex">y[n]</script> is denoted as:</p>

<script type="math/tex; mode=display">x[n] * h[n] = y[n]</script>

<p>Since convolution allows us to go from input signal <script type="math/tex">x[n]</script> to output signal <script type="math/tex">y[n]</script>, we can conclude that convolution involves the generation of the impulse response for each impulse in the input signal as decomposed by <a href="http://www.dspguide.com/ch5/7.htm">impulse decomposition</a>, <em>as well as</em> the subsequent synthesis of each impulse response, to generate the output signal.</p>

<h2 id="definition">Definition</h2>

<p>Convolution can be described by the so called <em>convolution summation</em>. The convolution summation is pretty simple, and is defined as follows:</p>

<script type="math/tex; mode=display">y[i] = \sum_{j=0}^{M-1}h[j]x[i-j]</script>

<p>Where the length of the output signal <script type="math/tex">y[n]</script> is defined as <script type="math/tex">M + N - 1</script> where <script type="math/tex">M</script> is the length of the unit impulse response and <script type="math/tex">N</script> is the length of the input signal.</p>

<p>All this says is that a given sample <script type="math/tex">y[i]</script> in the output signal <script type="math/tex">y[n]</script> is determined by the summation of every <script type="math/tex">i^{th}</script> sample in every resultant impulse response. In effect, the summation above encodes how different samples in the resulting impulse responses contribute to a single output sample.</p>

<p>Natural imperative instinct might lead you to conclude that this can be easily implemented using nested iterations and arrays:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">const</span> <span class="kt">int</span> <span class="n">outputLength</span> <span class="o">=</span> <span class="n">M</span> <span class="o">+</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">outputLength</span><span class="p">]();</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outputLength</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">h</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But wait up! We are using Haskell, a functional programming language which typically does without both arrays and iteration. This means that to implement convolution in Haskell without the use of <a href="http://hackage.haskell.org/package/array">Arrays</a> or imperative iteration loops, we need to really understand the operation occurring in the convolution summation.</p>

<h3 id="convolution-machine">Convolution Machine</h3>

<p>The book <a href="http://www.dspguide.com">The Scientist and Engineer’s Guide to Digital Signal Processing</a> uses a metaphor known as the <a href="http://www.dspguide.com/ch6/4.htm">Convolution Machine</a> to help conceptualize the convolution operation at a granular level. The convolution machine is simply a theoretical machine in which the unit impulse response is:</p>

<ol>
  <li>wrapped onto a roller/cylinder</li>
  <li>rolled over the input signal such that each sample lines up with one on the reversed impulse response</li>
  <li>each lined-up pair of samples from input signal and impulse response is multiplied and each product is summed</li>
</ol>

<p>If you’re wondering why step <strong>3</strong> mentions a <em>reversed</em> impulse response, imagine that you have a roller and that the impulse response is on a strip of tape. Now imagine that you apply the impulse response tape over and around the roller, such that the numbers are facing you and are in the correct order. Now, when you roll this roller over and across the input signal, from left to right, the numbers on the impulse response tape will make contact with the input signal in <em>reverse order</em>.</p>

<p>See <a href="http://www.dspguide.com/ch6/4.htm">this page</a> for an illustration of the convolution machine in Figure 6-8.</p>

<h2 id="implementation">Implementation</h2>

<p>Implementing the convolution machine is pretty straightforward once we are able to conceptualize what it is actually doing.</p>

<p>Let’s start with the type signature. Since we’re not using arrays, we’ll represent the signals as lists of numbers. Convolution does something with two signals to produce a third signal, so the type signature is pretty straightforward:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">convolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">convolve</span> <span class="n">hs</span> <span class="n">xs</span> <span class="ow">=</span> <span class="n">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the signature, <code>xs</code> refers to the input signal and <code>hs</code> refers to the impulse response.</p>

<h3 id="padding">Padding</h3>

<p>Now for the implementation of <code>convolve</code>. First, consider this component of the convolution summation:</p>

<script type="math/tex; mode=display">x[i-j]</script>

<p>When we are computing the first sample, such that <script type="math/tex">i = 0</script>, in the output signal <script type="math/tex">y[n]</script>, then at one point we need to refer to the <script type="math/tex">x[-(M-1)]</script> sample where <script type="math/tex">M</script> is length of impulse response. However, there are no samples to the left of the first sample.</p>

<p>So what we have to do is prepad the input signal with <script type="math/tex">M-1</script> samples of value <script type="math/tex">0</script>. This padding has the added benefit of allowing us to simply map over the padded input signal to generate the output signal. This is because the convolution operation’s output signal length is <script type="math/tex">M + N - 1</script> where <script type="math/tex">M</script> is the length of the impulse response and <script type="math/tex">N</script> is the length of the input signal. The padding can be achieved with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">let</span> <span class="n">pad</span> <span class="ow">=</span> <span class="n">replicate</span> <span class="p">((</span><span class="n">length</span> <span class="n">hs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">ts</span>  <span class="ow">=</span> <span class="n">pad</span> <span class="o">++</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once we prepad the input signal with enough zero samples, we can pass the padded input signal and impulse response to a function which simulates the rolling of the convolution machine. This function will be nested within <code>convolve</code> and will simply be used as a recursive helper function.</p>

<h3 id="lets-roll">Let’s Roll</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">roll</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">roll</span> <span class="kr">_</span>  <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">roll</span> <span class="n">hs</span> <span class="n">ts</span> <span class="ow">=</span> <span class="n">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>roll</code> function is recursive and will simulate the actual rolling of the convolution machine over the input signal. As it rolls, it will consume the <code>head</code> of the input signal <code>ts</code>. Think of the consumption of the <code>head</code> as if the input signal is being wrapped around the roller as it rolls. The input signal <code>ts</code> will therefore eventually be empty, meaning the convolution machine has finished rolling over the entire input signal.</p>

<p>The <code>roll</code> function is run for every sample in the output signal. This is where the bulk of the implementation comes in. At any given sample in the input signal, we simulate the roll by zipping the input signal from that sample forward along with the impulse response. This generates a list of pairs each consisting of the input signal sample with its corresponding impulse response sample (which is being rolled over it).</p>

<p>If you have trouble conceptualizing this, imagine that the impulse response on the roller is tape, so that when you roll it over the input signal, the impulse response – which, remember, makes contact with the input signal in reverse – sticks to the input signal and is lined up such that each sample in the impulse response is directly over a sample of the input signal.</p>

<p>We then need to multiply the components of each pair with each other, i.e. the input sample multiplied by its corresponding impulse response sample. The act of zipping and multiplying the zipped up pairs can be done in one go with <code>zipWith (*)</code>. We then gather all of these products and <code>sum</code> them up. This sum is the latest computed sample in the output signal.</p>

<p>We construct the complete output signal by cons’ing the sample with a recursive call to <code>roll</code>, however this <code>roll</code> will concern only the next sample forward, thereby simulating rolling across the input signal.</p>

<p>With this information, we can finish the definition of <code>roll</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">roll</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">roll</span> <span class="kr">_</span>  <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">roll</span> <span class="n">hs</span> <span class="n">ts</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">sample</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">ts</span> <span class="n">hs</span>
</span><span class="line">             <span class="kr">in</span> <span class="n">sample</span> <span class="kt">:</span> <span class="n">roll</span> <span class="n">hs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the whole convolution function <code>convolve</code> put together:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">convolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">convolve</span> <span class="n">hs</span> <span class="n">xs</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">pad</span> <span class="ow">=</span> <span class="n">replicate</span> <span class="p">((</span><span class="n">length</span> <span class="n">hs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span>
</span><span class="line">      <span class="n">ts</span>  <span class="ow">=</span> <span class="n">pad</span> <span class="o">++</span> <span class="n">xs</span>
</span><span class="line">  <span class="kr">in</span> <span class="n">roll</span> <span class="n">ts</span> <span class="p">(</span><span class="n">reverse</span> <span class="n">hs</span><span class="p">)</span>
</span><span class="line">  <span class="kr">where</span>
</span><span class="line">    <span class="n">roll</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line">    <span class="n">roll</span> <span class="kr">_</span>  <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line">    <span class="n">roll</span> <span class="n">hs</span> <span class="n">ts</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">sample</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">ts</span> <span class="n">hs</span>
</span><span class="line">                 <span class="kr">in</span> <span class="n">sample</span> <span class="kt">:</span> <span class="n">roll</span> <span class="n">hs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div><figcaption><span>naive convolution in Haskell through the convolution machine</span></figcaption></figure></notextile></div>

<h2 id="reduction">Reduction</h2>

<p>Now that we understand the concept behind convolution, we can reduce the above implementation a bit further.</p>

<p>The observation we should make is that the <code>roll</code> function acts like <code>map</code>, specifically over <code>ts</code>. The only detail is that on every element mapped over, the result of that element’s mapping concerns the list <code>ts</code> from that element forward. If we are on the third element of <code>ts</code>, we only act on the third element forward. In other words, we are mapping over every <code>tail</code> of <code>ts</code>. Knowing this, we can change the <code>roll</code> function to a straight up <code>map</code> over <code>tails ts</code>.</p>

<p>However, <code>tails</code> considers <code>[]</code> to be a tail of any list – which is technically correct – so we’ll always have a trailing <code>0</code> element if we do it this way. That’s why we simply take the <code>init</code> of the result of <code>tails</code>, which returns every element in a list except the last one. We also still need to prepad the signal, so those lines remain:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">convolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">convolve</span> <span class="n">hs</span> <span class="n">xs</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">pad</span> <span class="ow">=</span> <span class="n">replicate</span> <span class="p">((</span><span class="n">length</span> <span class="n">hs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span>
</span><span class="line">      <span class="n">ts</span>  <span class="ow">=</span> <span class="n">pad</span> <span class="o">++</span> <span class="n">xs</span>
</span><span class="line">  <span class="kr">in</span> <span class="n">map</span> <span class="p">(</span><span class="n">sum</span> <span class="o">.</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">reverse</span> <span class="n">hs</span><span class="p">))</span> <span class="p">(</span><span class="n">init</span> <span class="o">$</span> <span class="n">tails</span> <span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div><figcaption><span>a reduced form of the convolution machine implementation</span></figcaption></figure></notextile></div>

<h2 id="parallelization">Parallelization</h2>

<p>There’s something to be said about how the various properties of the Haskell language come together to make certain algorithms trivially parallelizable. Green threads, single assignment, function purity and its consequent idempotence/referential transparency – I can go on and on, but I’d rather not digress from the topic of this post. You won’t get any Monad koolaid from me. Still, I think it’s interesting to note how easy it can be to parallelize this naive convolution algorithm. So let’s do it.</p>

<h3 id="parmap">parMap</h3>

<p>The <a href="http://hackage.haskell.org/package/parallel">parallel</a> Haskell package contains various tools for parallelization. One of these is the <a href="http://hackage.haskell.org/packages/archive/parallel/latest/doc/html/Control-Parallel-Strategies.html">Control.Parallel.Strategies</a> module, which defines the <a href="http://hackage.haskell.org/packages/archive/parallel/latest/doc/html/Control-Parallel-Strategies.html#v:parMap"><code>parMap</code></a> function, which maps over list elements in parallel, in essence, a parallel map:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">parMap</span> <span class="ow">::</span> <span class="kt">Strategy</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>parMap</code> takes an <a href="http://hackage.haskell.org/packages/archive/parallel/latest/doc/html/Control-Parallel-Strategies.html#t:Strategy">evaluation strategy</a> which is used to actually perform the evaluation in parallel. We use the <a href="http://hackage.haskell.org/packages/archive/parallel/latest/doc/html/Control-Parallel-Strategies.html#v:rdeepseq"><code>rdeepseq</code></a> evaluation strategy, which fully evaluates the argument to Normal Form (i.e. fully evaluated), as opposed to <a href="http://hackage.haskell.org/packages/archive/parallel/latest/doc/html/Control-Parallel-Strategies.html#v:rseq"><code>rseq</code></a> which merely evaluates the argument to <a href="http://en.wikibooks.org/wiki/Haskell/Graph_reduction#Weak_Head_Normal_Form">Weak Head Normal Form</a> (<abbr title="Weak Head Normal Form">WHNF</abbr>). The <code>rdeepseq</code> strategy can only operate on arguments it knows it can fully evaluate, those that conform to the <a href="http://hackage.haskell.org/packages/archive/deepseq/latest/doc/html/Control-DeepSeq.html#t:NFData"><code>NFData</code></a> typeclass from the <a href="http://hackage.haskell.org/package/deepseq">Control.Deepseq</a> module. To conform to this, we add another type constraint to our convolution parameters:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">parConvolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">NFData</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Continuing forward, all we have to do now is make a drop-in replacement of <code>map</code> with <code>parMap</code>. Actually, it’s not quite a drop-in replacement, because we need to supply <code>parMap</code> with the <code>rdeepseq</code> evaluation strategy:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">parConvolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">NFData</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">parConvolve</span> <span class="n">hs</span> <span class="n">xs</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">pad</span> <span class="ow">=</span> <span class="n">replicate</span> <span class="p">((</span><span class="n">length</span> <span class="n">hs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span>
</span><span class="line">      <span class="n">ts</span>  <span class="ow">=</span> <span class="n">pad</span> <span class="o">++</span> <span class="n">xs</span>
</span><span class="line">  <span class="kr">in</span> <span class="n">parMap</span> <span class="n">rdeepseq</span> <span class="p">(</span><span class="n">sum</span> <span class="o">.</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">reverse</span> <span class="n">hs</span><span class="p">))</span> <span class="p">(</span><span class="n">init</span> <span class="o">$</span> <span class="n">tails</span> <span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div><figcaption><span>a parallelized version of the reduced naive convolution algorithm</span></figcaption></figure></notextile></div>

<h3 id="benchmark">Benchmark</h3>

<p>The <a href="http://hackage.haskell.org/packages/archive/criterion"><code>criterion</code></a> Haskell package provides tools for benchmarking and analyzing code. The synthetic benchmark we will conduct will run each implementation with an impulse response of length 100 and an input signal of length 1,000.</p>

<p>In the following code, <code>conv</code> is the naive implementation, <code>conv'</code> is the reduced naive implementation, and <code>parConv</code> is the parallel implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">ConvType</span> <span class="ow">=</span> <span class="kt">Naive</span> <span class="o">|</span> <span class="kt">Reduced</span> <span class="o">|</span> <span class="kt">Parallel</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Ord</span><span class="p">)</span>
</span><span class="line"><span class="nf">convTypes</span> <span class="ow">=</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Map</span><span class="o">.</span><span class="n">fromList</span> <span class="p">[(</span><span class="kt">Naive</span><span class="p">,</span> <span class="n">conv</span><span class="p">),</span> <span class="p">(</span><span class="kt">Reduced</span><span class="p">,</span> <span class="n">conv&#39;</span><span class="p">),</span> <span class="p">(</span><span class="kt">Parallel</span><span class="p">,</span> <span class="n">parConv</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="n">defaultMain</span> <span class="p">[</span>
</span><span class="line">  <span class="n">bench</span> <span class="s">&quot;Naive Convolution&quot;</span> <span class="p">(</span><span class="n">runConv</span> <span class="kt">Naive</span><span class="p">),</span>
</span><span class="line">  <span class="n">bench</span> <span class="s">&quot;Reduced Convolution&quot;</span> <span class="p">(</span><span class="n">runConv</span> <span class="kt">Reduced</span><span class="p">),</span>
</span><span class="line">  <span class="n">bench</span> <span class="s">&quot;Parallelized Convolution&quot;</span> <span class="p">(</span><span class="n">runConv</span> <span class="kt">Parallel</span><span class="p">)</span> <span class="p">]</span>
</span><span class="line">  <span class="kr">where</span> <span class="n">runConv</span> <span class="n">ctype</span> <span class="ow">=</span>
</span><span class="line">          <span class="kr">let</span> <span class="n">hs</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">100</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">]</span>
</span><span class="line">              <span class="n">ts</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">1000</span> <span class="ow">::</span> <span class="kt">Int</span><span class="p">]</span>
</span><span class="line">              <span class="n">convfn</span> <span class="ow">=</span> <span class="n">fromJust</span> <span class="o">$</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Map</span><span class="o">.</span><span class="n">lookup</span> <span class="n">ctype</span> <span class="n">convTypes</span>
</span><span class="line">          <span class="kr">in</span> <span class="n">nf</span> <span class="p">(</span><span class="n">convfn</span> <span class="n">hs</span><span class="p">)</span> <span class="n">ts</span>
</span></code></pre></td></tr></table></div><figcaption><span>criterion benchmarking code</span></figcaption></figure></notextile></div>

<p>Compile the benchmark with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ghc --make -O2 -threaded -o conv conv.hs
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run it with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>./conv -o bench.html -r out.csv +RTS -N4
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>-o</code> parameter specifies an output file for generated <a href="../../../../assets/html/convolution-criterion.html">charts and graphs</a>. The <code>-r</code> parameter specifies a comma separated value (<abbr title="Comma Separated Value">CSV</abbr>) file to output relative statistics which we use to measure performance relative to the reference, non-reduced naive implementation.</p>

<p>The <code>+RTS</code> parameter is a delimiter which begins parameters to the <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html">runtime system</a>. The <code>-N#</code> parameter specifies how many cores to utilize. The machine I was using has 6 cores, but I found that using less than that lowered the amount of statistical variance. I imagine this was because the computer was able to continue its own tasks on the other two cores.</p>

<p>The above benchmark yielded the following results:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Name</th>
      <th style="text-align: center">% faster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Naive (Reference)</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: left">Reduced</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: left">Parallel</td>
      <td style="text-align: center">54</td>
    </tr>
  </tbody>
</table>

<p>The parallel version apparently really boosts performance. An important thing to realize is that when parallelizing things, it’s considered best to only parallelize when the benefits outweigh the relative overhead of managing the green threads.</p>

<p>For example, in my tests, changing the impulse response length to 5 and the input signal length to 10 shows the parallel version to be 27% slower than the naive implementation. Also notice that the reduced version is a bit slower, for what I can only imagine to be a <abbr title="Glasgow Haskell Compiler">GHC</abbr> optimization that applies to the naive implementation but not to the reduced version.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Name</th>
      <th style="text-align: center">% faster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Naive (Reference)</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: left">Reduced</td>
      <td style="text-align: center">-16</td>
    </tr>
    <tr>
      <td style="text-align: left">Parallel</td>
      <td style="text-align: center">-27</td>
    </tr>
  </tbody>
</table>

<p>On the other hand, increasing the impulse response length to 1,000 and the input signal length to 10,000 maintained a similar performance increase:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Name</th>
      <th style="text-align: center">% faster</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Naive (Reference)</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: left">Reduced</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: left">Parallel</td>
      <td style="text-align: center">48</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion</h2>

<p>I’m new to Digital Signal Processing, so if you notice any glaring errors please feel free to correct me; I would appreciate it. If you are interested in this subject and would like to read a book to learn more, I wholeheartedly recommend <a href="http://www.dspguide.com">The Scientist and Engineer’s Guide to Digital Signal Processing</a>. If you would like to learn more about Convolution, you can check the relevant chapters in that freely available book.</p>

<h3 id="imperative-approach">Imperative Approach</h3>

<p>You can also check out <a href="http://www.songho.ca/dsp/convolution/convolution.html">this page</a> as well, which also covers multidimensional convolution with a concrete example of a <a href="http://en.wikipedia.org/wiki/Gaussian_filter">Gaussian filter</a> applied to an image for the purposes of blurring it. This specific application of the Gaussian filter is known as the <a href="http://en.wikipedia.org/wiki/Gaussian_blur">Gaussian Blur</a>. The Gaussian Blur is pretty popular in realtime image rendering, such as in video games, because of a property it has which allows it be applied in two dimensions, e.g. in an image, as two independent one-dimensional operations. This makes it dramatically faster and more efficient, and is trivial to implement in modern <abbr title="Graphics Processing Unit">GPU</abbr> <a href="http://www.opengl.org/wiki/Compute_Shader">Compute shaders</a> <sup id="fnref:compute_shader"><a href="#fn:compute_shader" rel="footnote">1</a></sup>. Such shaders can then be used to implement effects such as motion blur in games <sup id="fnref:motion_blur"><a href="#fn:motion_blur" rel="footnote">2</a></sup>. The page also provides imperative implementations of convolution in C++.</p>

<h3 id="optimizations">Optimizations</h3>

<p>Haskell is known for having many ways of doing any one thing, so if you come up with a better solution feel free to <a href="https://gist.github.com">gist it</a> and post it in the comments.</p>

<p>Of course, this post concerns a <em>naive</em> implementation of convolution. There are other more optimized implementations of convolution, such as <abbr title="Fast Fourier Transform">FFT</abbr> convolution which exploits the Fast Fourier Transform and the principle of duality – convolution in the time domain is equivalent to multiplication in the frequency domain – to perform convolution a lot faster in some cases.</p>

<div class="footnotes">
  <ol>
    <li id="fn:compute_shader">
      <p>As described in <a href="http://www.d3dcoder.net/d3d11.htm">3D Game Programming with DirectX 11</a> by Frank D. Luna in Ch 12 page 450 § 12.7<a href="#fnref:compute_shader" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:motion_blur">
      <p>Despite this optimization of Gaussian Blurring, many implementations optimize further. Blurring typically involves rendering the scene to a separate buffer (e.g. Render-to-Texture) at a scaled-down resolution. This speeds up the blurring operation as there are less pixels to operate on. Then the result is rendered to the actual screen. Since the point is to blur, the upscaling is usually hardly noticeable.</p>

      <p>Recently I purchased an old game on Steam which I had played circa 2003. This game was developed back when 1280x1024 was a popular resolution, that is 4:3 aspect ratio. I got to a part where the game displayed some sort of blur effect and noticed that the entire screen was completely blurred to the point where I couldn’t make anything out. I presume this was not the intended effect. If I had to guess, I imagine they hard-coded a scaled down resolution – and thus aspect ratio as well – at which to render the scene for blurring, such that upscaling it to my current 1920x1080 resolution 16:9 AR looked horrible. I imagine newer games take into account aspect ratio and some other factor to scale down the current resolution from.<a href="#fnref:motion_blur" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Back]]></title>
    <link href="http://blaenkdenum.com/posts/im-back/"/>
    <updated>2012-12-25T23:25:00-08:00</updated>
    <id>http://blaenkdenum.com/posts/im-back</id>
    <content type="html"><![CDATA[<p>It’s been a while since I last had a blog. In fact, I think it’s been two, maybe three years now. I previously had a WordPress blog that I updated regularly. However, the things I was studying on my own at the time consumed me and I considered writing about those things to be a low priority. After all, who want’s to hear what a noob thinks about something he’s barely beginning to learn about? So instead I figured I’d continue reading and studying, and maintaining a blog kind of fell into the backburner.</p>

<h3 id="blogging">Blogging</h3>

<p>For over a year now I had wanted to get back into blogging, at the very least to serve as a sort of journal for what I’ve learned, what I’m working on, etc. I didn’t want to bother maintaining a WordPress blog anymore, so I gave tumblr a shot. I felt that tumblr wasn’t as flexible as I would like and lost interest again. A few months ago I got the urge again to set up a blog, and having heard of static site generators on hacker news, I ended up giving Jekyll/Octopress a try. That’s what I’m running right now and so far it’s working out well. I actually set this up a few months ago, but hadn’t had the time to properly set it up and design myself a theme.</p>

<h3 id="haskell">Haskell</h3>

<p>I’ve done a lot during my absence these past few years. In fact, it’s all a big blur so I don’t know where to begin to talk about it. Most recently, for example, I worked on a <a href="https://github.com/blaenk/pulse-visualizer">music visualizer</a> for Linux’ Pulse Audio in Haskell using OpenGL and FFTW. This was the first program I wrote in Haskell, aside from little programs I would write to learn the language. I learned Haskell primarily using a combination of <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good</a> and <a href="http://book.realworldhaskell.org/read/">Real World Haskell</a>. For certain things, such as understanding the concept of laziness in Haskell, I used the <a href="http://en.wikibooks.org/wiki/Haskell/Laziness">Haskell Wikibook</a>. I also had a Professor at school who was familiar with Haskell and DSP as my mentor. Thanks to his previous experience, I was able to learn both things pretty quickly. Whenever I was unsure of my understanding of a given topic, such as Monads, I had him to discuss and refine my understanding with.</p>

<h3 id="digital-signal-processing">Digital Signal Processing</h3>

<p>I worked on this project to learn both Haskell and Digital Signal Processing. The book I used for learning Digital Signal Processing is <a href="http://www.dspguide.com/pdfbook.htm">The Scientist and Engineer’s Guide to Digital Signal Processing</a>. For the longest time – probably the same amount of time I’ve been without a blog – I’ve wanted to learn about Digital Signal Processing, but every book I found assumed some prior DSP knowledge, electronics/circuits knowledge, or hardcore mathematical understanding. This book seems to teach DSP from the perspective of a developer, showing code for algorithms discussed throughout, such as the <a href="http://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier Transform</a>.</p>

<p>I will probably write a post with more information about the project and what it was like to learn Haskell and DSP, and where I intend to go forward with this. For now I just wanted to push out a real post, unlike the <a href="http://blaenkdenum.com/posts/test-post/">test post</a> which I use to test the design and markup of this site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Post]]></title>
    <link href="http://blaenkdenum.com/posts/test-post/"/>
    <updated>2012-09-19T02:49:00-07:00</updated>
    <id>http://blaenkdenum.com/posts/test-post</id>
    <content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent dolor nisi, feugiat sit amet egestas sit amet, mattis sit amet velit. Proin quis metus id mi vulputate adipiscing eget et <strong>sapien</strong>. Sed iaculis auctor sem ac convallis <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Cras nisi libero, dignissim quis facilisis et, bibendum eget enim. Vivamus est leo, tristique ut adipiscing vitae, malesuada adipiscing tellus. Integer nec aliquam justo. Nam ac lacus erat. In <strong><em>hac habitasse platea</em></strong> dictumst. Donec pharetra, lectus sit amet ultrices fringilla, metus mi auctor ligula, in hendrerit dui arcu eu leo.</p>

<p>Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla facilisi. Vestibulum consectetur nulla eget erat <em>fermentum malesuada</em>. Nullam ultricies nulla ut eros vulputate sed cursus tortor faucibus. Cras ac risus mauris. Suspendisse molestie elementum luctus. Vestibulum <a href="http://www.google.com">venenatis blandit</a> velit ac pretium.</p>

<script type="math/tex; mode=display"> i\hbar\frac{\partial \psi}{\partial t}
  = \frac{-\hbar^2}{2m} \left(
    \frac{\partial^2}{\partial x^2}
    + \frac{\partial^2}{\partial y^2}
    + \frac{\partial^2}{\partial z^2}
  \right) \psi + V \psi </script>

<p>Nulla facilisi. Cras lectus velit, rhoncus et mollis eget, ultricies quis ligula. Integer ornare nibh in est molestie tempus. Praesent bibendum placerat diam id gravida. Fusce et velit eget dui laoreet interdum eget id arcu. Ut et massa nibh, ut mollis augue. In hac habitasse platea dictumst. Sed massa orci, <strong>venenatis</strong> vitae dapibus sit amet, varius ut nibh. Ut vel enim leo, at posuere nisi. In elementum sem vel nibh malesuada sagittis.</p>

<script type="math/tex; mode=display">R_{ab} - {\textstyle 1 \over 2}R\,g_{ab} + \Lambda\ g_{ab} = \kappa\, T_{ab}</script>

<p>Nulla facilisi. Cras lectus velit, rhoncus et mollis eget, ultricies quis ligula. Integer ornare nibh in est molestie tempus. Praesent bibendum placerat diam id gravida. Fusce et velit eget dui laoreet interdum eget id arcu. Ut et massa nibh, ut mollis augue. In hac habitasse platea dictumst. Sed massa orci, venenatis vitae dapibus sit amet, varius ut nibh. Ut vel enim leo, at posuere nisi. In elementum sem vel nibh malesuada sagittis.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;base64&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;favicon.png&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">  <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="no">Base64</span><span class="o">.</span><span class="n">decode64</span><span class="p">(</span><span class="n">base64</span><span class="p">))</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div><figcaption><span>an example of base64 decoding in ruby </span><a href="https://gist.github.com/3759076">gist</a></figcaption></figure></notextile></div>

<p>Donec vitae turpis non augue pulvinar imperdiet eu non erat. Integer mollis diam ac quam lobortis luctus. Suspendisse scelerisque sodales massa sit amet pharetra. <script type="math/tex">\Delta S = \pi</script> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> Donec cursus, velit in mollis dapibus, nunc elit pharetra erat, et dictum sem sapien pretium ligula. Cras nibh elit, mollis eu eleifend sed, faucibus in velit. Aliquam gravida tristique molestie. Donec gravida, diam ac auctor auctor, nulla enim varius sem, non auctor urna mi vitae enim. Cras aliquam semper nibh, quis viverra urna ultrices et. Nunc rhoncus fringilla dapibus.</p>

<p><img class="center" src="http://placekitten.com/720/250" /></p>

<h1 id="immortal-words">Immortal Words</h1>

<blockquote><p>Too many people have opinions on things they know nothing about. And the more ignorant they are, the more opinions they have.</p><footer><strong>Thomas Hildern</strong> <cite><a href="http://fallout.wikia.com/wiki/Thomas_Hildern">Fallout Wiki</a></cite></footer></blockquote>

<h2 id="the-meaning-of-life">The Meaning of Life</h2>

<p><img class="right" src="http://placekitten.com/150/100" title="Place Kitten #3" />
Aenean tristique, magna a semper venenatis, orci odio tempor lorem, ac molestie ligula enim ac urna. Fusce egestas nisl id massa porta vitae pretium tellus aliquet. Morbi tempor arcu sit amet felis hendrerit aliquam. Nulla facilisi. Suspendisse diam tortor, pharetra ac porta eu, ullamcorper nec lectus. Sed nulla turpis, blandit et tincidunt vel, <code>condimentum</code> et sapien. Aliquam dignissim blandit pharetra. Mauris ornare accumsan libero at bibendum. Morbi dui nisl, aliquet sit amet gravida sit amet, mollis commodo nulla. Quisque eu felis purus.</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
 \forall x, y : \mathbb{Z}, x > 3 \land y < 2 \Rightarrow x^2 - 2y > 5 %]]&gt;</script>

<p>Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi. In lectus nisl, semper ac imperdiet eu, ultricies luctus erat. Sed ultrices lectus in <code>massa tincidunt</code> fringilla. Aenean lectus tortor, tempus a sagittis vitae, hendrerit eget lacus.</p>

<h3 id="things-to-do">Things to do</h3>

<ul>
  <li>first do this</li>
  <li>then do this other thing</li>
  <li>then maybe, if you’re not tired, do this last thing</li>
</ul>

<p>Here it is numbered for you:</p>

<ol>
  <li>first do this</li>
  <li>then do this other thing</li>
  <li>then maybe, if you’re not tired, do this last thing</li>
</ol>

<p>As you can see, there’s lots of work to do! Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi. In lectus nisl, semper ac imperdiet eu, ultricies luctus erat. Sed ultrices lectus in <code>massa tincidunt</code> fringilla. Aenean lectus tortor, tempus a sagittis vitae, hendrerit eget lacus.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Cras nibh elit, mollis eu eleifend sed, faucibus in velit. <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>This is the awesome constant <a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
