<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jorge Israel Peña]]></title>
  <link href="http://www.blaenkdenum.com/atom.xml" rel="self"/>
  <link href="http://www.blaenkdenum.com/"/>
  <updated>2013-01-19T20:07:42-08:00</updated>
  <id>http://www.blaenkdenum.com/</id>
  <author>
    <name><![CDATA[Jorge Israel Peña]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Naive Convolution in Haskell]]></title>
    <link href="http://www.blaenkdenum.com/2013/01/04/naive-convolution-in-haskell/"/>
    <updated>2013-01-04T18:21:00-08:00</updated>
    <id>http://www.blaenkdenum.com/2013/01/04/naive-convolution-in-haskell</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#principle">Principle</a></li>
  <li><a href="#definition">Definition</a></li>
  <li><a href="#implementation">Implementation</a>    <ul>
      <li><a href="#padding">Padding</a></li>
      <li><a href="#lets-roll">Let’s Roll</a></li>
    </ul>
  </li>
  <li><a href="#reduction">Reduction</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<p><a href="http://en.wikipedia.org/wiki/Convolution">Convolution</a> is a mathematical method of combining two signals to form a third signal. Passing the <a href="http://en.wikipedia.org/wiki/Dirac_delta_function">Dirac delta function</a> (unit impulse) <script type="math/tex">\delta[n]</script> through a linear system results in the impulse response <script type="math/tex">h[n]</script>. The impulse response is simply the signal resulting from passing the unit impulse (Dirac delta function) through a linear system.</p>

<h2 id="principle">Principle</h2>

<p>The properties of <a href="http://www.cns.nyu.edu/~david/handouts/linear-systems/linear-systems.html">homogeneity</a> and <a href="http://en.wikipedia.org/wiki/Shift-invariant_system">shift-invariance</a> in <a href="http://en.wikipedia.org/wiki/LTI_system_theory">Linear Time-Invariant System Theory</a> holds that scaling and shifting the input results in the same scaling and shifting in the output. Because of these properties, we can represent any impulse as a shifted and scaled delta function and consequently know what the impulse response will be for that scaled and shifted impulse.</p>

<p>An impulse of -3 at the 8<sup>th</sup> sample would be represented as a unit impulse by scaling the delta function by -3 and shifting it to the right by 8 samples: <script type="math/tex">-3\delta[n-8]</script>, where <script type="math/tex">n-8</script> means the 8<sup>th</sup> sample is now the 0<sup>th</sup>. Due to homogeneity and shift invariance, we can determine the impulse response of this impulse by simply scaling and shifting the unit impulse response in the same manner. In other words, <script type="math/tex">-3\delta[n-8] \mapsto -3h[n-8]</script></p>

<p>What this means is that if we know the unit impulse response of a system, we consequently know how the system will react to <em>any</em> impulse. These impulse responses can then be synthesized to form the output signal that would result from running the input signal through the actual system.</p>

<p>In short, the input signal <em>convolved</em> with the unit impulse response results in the output signal. Convolution of input signal <script type="math/tex">x[n]</script> with unit impulse <script type="math/tex">h[n]</script> to generate output signal <script type="math/tex">y[n]</script> is denoted as:</p>

<script type="math/tex; mode=display">x[n] * h[n] = y[n]</script>

<p>Since convolution allows us to go from input signal <script type="math/tex">x[n]</script> to output signal <script type="math/tex">y[n]</script>, we can conclude that convolution involves the generation of the impulse response for each impulse in the input signal as decomposed by <a href="http://www.dspguide.com/ch5/7.htm">impulse decomposition</a>, <em>as well as</em> the subsequent synthesis of each impulse response, to generate the output signal.</p>

<h2 id="definition">Definition</h2>

<p>Convolution can be described by the so called <em>convolution summation</em>. The convolution summation is pretty simple, and is defined as follows:</p>

<script type="math/tex; mode=display">y[i] = \sum_{j=0}^{M-1}h[j]x[i-j]</script>

<p>Where the length of the output signal <script type="math/tex">y[n]</script> is defined as <script type="math/tex">M + N - 1</script> where <script type="math/tex">M</script> is the length of the unit impulse response and <script type="math/tex">N</script> is the length of the input signal.</p>

<p>All this says is that a given sample <script type="math/tex">y[i]</script> in the output signal <script type="math/tex">y[n]</script> is determined by the summation of every <script type="math/tex">i^{th}</script> sample in every resultant impulse response. In effect, the summation above encodes how different samples in the resulting impulse responses contribute to a single output sample.</p>

<p>Natural imperative instinct might lead you to conclude that this can be easily implemented using nested iterations and arrays:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">const</span> <span class="kt">int</span> <span class="n">outputLength</span> <span class="o">=</span> <span class="n">M</span> <span class="o">+</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">outputLength</span><span class="p">]();</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outputLength</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">h</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But wait up! We are using Haskell, a functional programming language which typically does without both arrays and iteration. This means that to implement convolution in Haskell without the use of <a href="http://hackage.haskell.org/package/array">Arrays</a> or imperative iteration loops, we need to really understand the operation occurring in the convolution summation.</p>

<p>The book <a href="http://www.dspguide.com">The Scientist and Engineer’s Guide to Digital Signal Processing</a> uses a metaphor known as the <a href="http://www.dspguide.com/ch6/4.htm">Convolution Machine</a> to help conceptualize the convolution operation at a granular level. The convolution machine is simply a theoretical machine in which the unit impulse response is:</p>

<ol>
  <li>wrapped onto a roller/cylinder</li>
  <li>rolled over the input signal such that each sample lines up with one on the reversed impulse response</li>
  <li>each lined-up pair of samples from input signal and impulse response is multiplied and each product is summed</li>
</ol>

<p>If you’re wondering why step <strong>3</strong> mentions a <em>reversed</em> impulse response, imagine that you have a roller and that the impulse response is on a strip of tape. Now imagine that you apply the impulse response tape over and around the roller, such that the numbers are facing you and are in the correct order. Now, when you roll this roller over and across the input signal, from left to right, the numbers on the impulse response tape will make contact with the input signal in <em>reverse order</em>.</p>

<p>See <a href="http://www.dspguide.com/ch6/4.htm">this page</a> for an illustration of the convolution machine in Figure 6-8.</p>

<h2 id="implementation">Implementation</h2>

<p>Implementing the convolution machine is pretty straightforward once we are able to conceptualize what it is actually doing.</p>

<p>Let’s start with the type signature. Since we’re not using arrays, we’ll represent the signals as lists of numbers. Convolution does something with two signals to produce a third signal, so the type signature is pretty straightforward:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">convolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">convolve</span> <span class="n">hs</span> <span class="n">xs</span> <span class="ow">=</span> <span class="n">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the signature, <code>xs</code> refers to the input signal and <code>hs</code> refers to the impulse response.</p>

<h3 id="padding">Padding</h3>

<p>Now for the implementation of <code>convolve</code>. First, consider this component of the convolution summation:</p>

<script type="math/tex; mode=display">x[i-j]</script>

<p>When we are computing the first sample, such that <script type="math/tex">i = 0</script>, in the output signal <script type="math/tex">y[n]</script>, then at one point we need to refer to the <script type="math/tex">x[-(M-1)]</script> sample where <script type="math/tex">M</script> is length of impulse response. However, there are no samples to the left of the first sample.</p>

<p>So what we have to do is prepad the input signal with <script type="math/tex">M-1</script> samples of value <script type="math/tex">0</script>. This padding has the added benefit of allowing us to simply map over the padded input signal to generate the output signal. This is because the convolution operation’s output signal length is <script type="math/tex">M + N - 1</script> where <script type="math/tex">M</script> is the length of the impulse response and <script type="math/tex">N</script> is the length of the input signal. The padding can be achieved with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">let</span> <span class="n">pad</span> <span class="ow">=</span> <span class="n">replicate</span> <span class="p">((</span><span class="n">length</span> <span class="n">hs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">ts</span>  <span class="ow">=</span> <span class="n">pad</span> <span class="o">++</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once we prepad the input signal with enough zero samples, we can pass the padded input signal and impulse response to a function which simulates the rolling of the convolution machine. This function will be nested within <code>convolve</code> and will simply be used as a recursive helper function.</p>

<h3 id="lets-roll">Let’s Roll</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">roll</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">roll</span> <span class="kr">_</span>  <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">roll</span> <span class="n">hs</span> <span class="n">ts</span> <span class="ow">=</span> <span class="n">undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>roll</code> function is recursive and will simulate the actual rolling of the convolution machine over the input signal. As it rolls, it will consume the <code>head</code> of the input signal <code>ts</code>. Think of the consumption of the <code>head</code> as if the input signal is being wrapped around the roller as it rolls. The input signal <code>ts</code> will therefore eventually be empty, meaning the convolution machine has finished rolling over the entire input signal.</p>

<p>The <code>roll</code> function is run for every sample in the output signal. This is where the bulk of the implementation comes in. At any given sample in the input signal, we simulate the roll by zipping the input signal from that sample forward along with the impulse response. This generates a list of pairs each consisting of the input signal sample with its corresponding impulse response sample (which is being rolled over it).</p>

<p>If you have trouble conceptualizing this, imagine that the impulse response on the roller is tape, so that when you roll it over the input signal, the impulse response – which, remember, makes contact with the input signal in reverse – sticks to the input signal and is lined up such that each sample in the impulse response is directly over a sample of the input signal.</p>

<p>We then need to multiply the components of each pair with each other, i.e. the input sample multiplied by its corresponding impulse response sample. The act of zipping and multiplying the zipped up pairs can be done in one go with <code>zipWith (*)</code>. We then gather all of these products and <code>sum</code> them up. This sum is the latest computed sample in the output signal.</p>

<p>We construct the complete output signal by cons’ing the sample with a recursive call to <code>roll</code>, however this <code>roll</code> will concern only the next sample forward, thereby simulating rolling across the input signal.</p>

<p>With this information, we can finish the definition of <code>roll</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">roll</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">roll</span> <span class="kr">_</span>  <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">roll</span> <span class="n">hs</span> <span class="n">ts</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">sample</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">ts</span> <span class="n">hs</span>
</span><span class="line">             <span class="kr">in</span> <span class="n">sample</span> <span class="kt">:</span> <span class="n">roll</span> <span class="n">hs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the whole convolution function <code>convolve</code> put together:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">convolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">convolve</span> <span class="n">hs</span> <span class="n">xs</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">pad</span> <span class="ow">=</span> <span class="n">replicate</span> <span class="p">((</span><span class="n">length</span> <span class="n">hs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span>
</span><span class="line">      <span class="n">ts</span>  <span class="ow">=</span> <span class="n">pad</span> <span class="o">++</span> <span class="n">xs</span>
</span><span class="line">  <span class="kr">in</span> <span class="n">roll</span> <span class="n">ts</span> <span class="p">(</span><span class="n">reverse</span> <span class="n">hs</span><span class="p">)</span>
</span><span class="line">  <span class="kr">where</span>
</span><span class="line">    <span class="n">roll</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line">    <span class="n">roll</span> <span class="kr">_</span>  <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line">    <span class="n">roll</span> <span class="n">hs</span> <span class="n">ts</span> <span class="ow">=</span> <span class="kr">let</span> <span class="n">sample</span> <span class="ow">=</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">ts</span> <span class="n">hs</span>
</span><span class="line">                 <span class="kr">in</span> <span class="n">sample</span> <span class="kt">:</span> <span class="n">roll</span> <span class="n">hs</span> <span class="p">(</span><span class="n">tail</span> <span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div><figcaption><span>naive convolution in Haskell through the convolution machine</span></figcaption></figure></notextile></div>

<h2 id="reduction">Reduction</h2>

<p>Now that we understand the concept behind convolution, we can reduce the above implementation a bit further.</p>

<p>The observation we should make is that the <code>roll</code> function acts like <code>map</code>, specifically over <code>ts</code>. The only detail is that on every element mapped over, the result of that element’s mapping concerns the list <code>ts</code> from that element forward. If we are on the third element of <code>ts</code>, we only act on the third element forward. In other words, we are mapping over every <code>tail</code> of <code>ts</code>. Knowing this, we can change the <code>roll</code> function to a straight up <code>map</code> over <code>tails ts</code>.</p>

<p>However, <code>tails</code> considers <code>[]</code> to be a tail of any list – which is technically correct – so we’ll always have a trailing <code>0</code> element if we do it this way. That’s why we simply take the <code>init</code> of the result of <code>tails</code>, which returns every element in a list except the last one. We also still need to prepad the signal, so those lines remain:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">convolve</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line"><span class="nf">convolve</span> <span class="n">hs</span> <span class="n">xs</span> <span class="ow">=</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">pad</span> <span class="ow">=</span> <span class="n">replicate</span> <span class="p">((</span><span class="n">length</span> <span class="n">hs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span>
</span><span class="line">      <span class="n">ts</span>  <span class="ow">=</span> <span class="n">pad</span> <span class="o">++</span> <span class="n">xs</span>
</span><span class="line">  <span class="kr">in</span> <span class="n">map</span> <span class="p">(</span><span class="n">sum</span> <span class="o">.</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">reverse</span> <span class="n">hs</span><span class="p">))</span> <span class="p">(</span><span class="n">init</span> <span class="o">$</span> <span class="n">tails</span> <span class="n">ts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div><figcaption><span>a reduced form of the convolution machine implementation</span></figcaption></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>I’m new to Digital Signal Processing, so if you notice any glaring errors please feel free to correct me; I would appreciate it. If you are interested in this subject and would like to read a book to learn more, I wholeheartedly recommend <a href="http://www.dspguide.com">The Scientist and Engineer’s Guide to Digital Signal Processing</a>. If you would like to learn more about Convolution, you can check the relevant chapters in that freely available book.</p>

<p>You can also check out <a href="http://www.songho.ca/dsp/convolution/convolution.html">this page</a> as well, which also covers multidimensional convolution with a concrete example of a <a href="http://en.wikipedia.org/wiki/Gaussian_filter">Gaussian filter</a> applied to an image for the purposes of blurring it. This specific application of the Gaussian filter is known as the <a href="http://en.wikipedia.org/wiki/Gaussian_blur">Gaussian Blur</a>. The Gaussian Blur is pretty popular in realtime image rendering, such as in video games, because of a property it has which allows it be applied in two dimensions, e.g. in an image, as two independent one-dimensional operations. This makes it dramatically faster and more efficient, and is trivial to implement in modern GPU <a href="http://www.opengl.org/wiki/Compute_Shader">Compute shaders</a><sup id="fnref:compute_shader"><a href="#fn:compute_shader" rel="footnote">1</a></sup>. Such shaders can then be used to implement effects such as motion blur in games<sup id="fnref:motion_blur"><a href="#fn:motion_blur" rel="footnote">2</a></sup>. The page also provides imperative implementations of convolution in C++.</p>

<p>Haskell is known for having many ways of doing any one thing, so if you come up with a better solution feel free to <a href="https://gist.github.com">gist it</a> and post it in the comments.</p>

<p>Of course, this post concerns a <em>naive</em> implementation of convolution. There are other more optimized implementations of convolution, such as FFT convolution which exploits the Fast Fourier Transform and the principle of duality – convolution in the time domain is equivalent to multiplication in the frequency domain – to perform convolution a lot faster in some cases.</p>

<div class="footnotes">
  <ol>
    <li id="fn:compute_shader">
      <p>As described in <a href="http://www.d3dcoder.net/d3d11.htm">3D Game Programming with DirectX 11</a> by Frank D. Luna in Ch 12 page 450 § 12.7 <a href="#fnref:compute_shader" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:motion_blur">
      <p>Despite this optimization of Gaussian Blurring, many implementations optimize further. Blurring typically involves rendering the scene to a separate buffer (e.g. Render-to-Texture) at a scaled-down resolution. This speeds up the blurring operation as there are less pixels to operate on. Then the result is rendered to the actual screen. Since the point is to blur, the upscaling is usually hardly noticeable.</p>

      <p>Recently I purchased an old game on Steam which I had played circa 2003. This game was developed back when 1280x1024 was a popular resolution, that is 4:3 aspect ratio. I got to a part where the game displayed some sort of blur effect and noticed that the entire screen was completely blurred to the point where I couldn’t make anything out. I presume this was not the intended effect. If I had to guess, I imagine they hard-coded a scaled down resolution – and thus aspect ratio as well – at which to render the scene for blurring, such that upscaling it to my current 1920x1080 resolution 16:9 AR looked horrible. I imagine newer games take into account aspect ratio and some other factor to scale down the current resolution from. <a href="#fnref:motion_blur" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Back]]></title>
    <link href="http://www.blaenkdenum.com/2012/12/25/im-back/"/>
    <updated>2012-12-25T23:25:00-08:00</updated>
    <id>http://www.blaenkdenum.com/2012/12/25/im-back</id>
    <content type="html"><![CDATA[<p>It’s been a while since I last had a blog. In fact, I think it’s been two, maybe three years now. I previously had a WordPress blog that I updated regularly. However, the things I was studying on my own at the time consumed me and I considered writing about those things to be a low priority. After all, who want’s to hear what a noob thinks about something he’s barely beginning to learn about? So instead I figured I’d continue reading and studying, and maintaining a blog kind of fell into the backburner.</p>

<p>For over a year now I had wanted to get back into blogging, at the very least to serve as a sort of journal for what I’ve learned, what I’m working on, etc. I didn’t want to bother maintaining a WordPress blog anymore, so I gave tumblr a shot. I felt that tumblr wasn’t as flexible as I would like and lost interest again. A few months ago I got the urge again to set up a blog, and having heard of static site generators on hacker news, I ended up giving Jekyll/Octopress a try. That’s what I’m running right now and so far it’s working out well. I actually set this up a few months ago, but hadn’t had the time to properly set it up and design myself a theme.</p>

<p>I’ve done a lot during my absence these past few years. In fact, it’s all a big blur so I don’t know where to begin to talk about it. Most recently, for example, I worked on a <a href="https://github.com/blaenk/pulse-visualizer">music visualizer</a> for Linux’ Pulse Audio in Haskell using OpenGL and FFTW. This was the first program I wrote in Haskell, aside from little programs I would write to learn the language. I learned Haskell primarily using a combination of <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good</a> and <a href="http://book.realworldhaskell.org/read/">Real World Haskell</a>. For certain things, such as understanding the concept of laziness in Haskell, I used the <a href="http://en.wikibooks.org/wiki/Haskell/Laziness">Haskell Wikibook</a>. I also had a Professor at school, who was familiar with Haskell and DSP, as my mentor. Thanks to his previous experience, I was able to learn both things pretty quickly. Whenever I was unsure of my understanding of a given topic, such as Monads, I had him to discuss and refine my understanding with.</p>

<p>I worked on this project to learn both Haskell and Digital Signal Processing. The book I used for learning Digital Signal Processing is <a href="http://www.dspguide.com/pdfbook.htm">The Scientist and Engineer’s Guide to Digital Signal Processing</a>. For the longest time – probably the same amount of time I’ve been without a blog – I’ve wanted to learn about Digital Signal Processing, but every book I found assumed some prior DSP knowledge, electronics/circuits knowledge, or hardcore mathematical understanding. This book seems to teach DSP from the perspective of a developer, showing code for algorithms discussed throughout, such as the <a href="http://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier Transform</a>.</p>

<p>I will probably write a post with more information about the project and what it was like to learn Haskell and DSP, and where I intend to go forward with this. For now I just wanted to push out a real post, unlike the <a href="http://www.blaenkdenum.com/2012/09/19/test-post/">test post</a> which I use to test the design and markup of this site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Post]]></title>
    <link href="http://www.blaenkdenum.com/2012/09/19/test-post/"/>
    <updated>2012-09-19T02:49:00-07:00</updated>
    <id>http://www.blaenkdenum.com/2012/09/19/test-post</id>
    <content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent dolor nisi, feugiat sit amet egestas sit amet, mattis sit amet velit. Proin quis metus id mi vulputate adipiscing eget et <strong>sapien</strong>. Sed iaculis auctor sem ac convallis<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Cras nisi libero, dignissim quis facilisis et, bibendum eget enim. Vivamus est leo, tristique ut adipiscing vitae, malesuada adipiscing tellus. Integer nec aliquam justo. Nam ac lacus erat. In <strong><em>hac habitasse platea</em></strong> dictumst. Donec pharetra, lectus sit amet ultrices fringilla, metus mi auctor ligula, in hendrerit dui arcu eu leo.</p>

<p>Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla facilisi. Vestibulum consectetur nulla eget erat <em>fermentum malesuada</em>. Nullam ultricies nulla ut eros vulputate sed cursus tortor faucibus. Cras ac risus mauris. Suspendisse molestie elementum luctus. Vestibulum <a href="http://www.google.com">venenatis blandit</a> velit ac pretium.</p>

<script type="math/tex; mode=display"> i\hbar\frac{\partial \psi}{\partial t}
  = \frac{-\hbar^2}{2m} \left(
    \frac{\partial^2}{\partial x^2}
    + \frac{\partial^2}{\partial y^2}
    + \frac{\partial^2}{\partial z^2}
  \right) \psi + V \psi </script>

<p>Nulla facilisi. Cras lectus velit, rhoncus et mollis eget, ultricies quis ligula. Integer ornare nibh in est molestie tempus. Praesent bibendum placerat diam id gravida. Fusce et velit eget dui laoreet interdum eget id arcu. Ut et massa nibh, ut mollis augue. In hac habitasse platea dictumst. Sed massa orci, <strong>venenatis</strong> vitae dapibus sit amet, varius ut nibh. Ut vel enim leo, at posuere nisi. In elementum sem vel nibh malesuada sagittis.</p>

<script type="math/tex; mode=display">R_{ab} - {\textstyle 1 \over 2}R\,g_{ab} + \Lambda\ g_{ab} = \kappa\, T_{ab}</script>

<p>Nulla facilisi. Cras lectus velit, rhoncus et mollis eget, ultricies quis ligula. Integer ornare nibh in est molestie tempus. Praesent bibendum placerat diam id gravida. Fusce et velit eget dui laoreet interdum eget id arcu. Ut et massa nibh, ut mollis augue. In hac habitasse platea dictumst. Sed massa orci, venenatis vitae dapibus sit amet, varius ut nibh. Ut vel enim leo, at posuere nisi. In elementum sem vel nibh malesuada sagittis.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;base64&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;favicon.png&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">  <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="no">Base64</span><span class="o">.</span><span class="n">decode64</span><span class="p">(</span><span class="n">base64</span><span class="p">))</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div><figcaption><span>an example of base64 decoding in ruby </span><a href="https://gist.github.com/3759076">gist</a></figcaption></figure></notextile></div>

<p>Donec vitae turpis non augue pulvinar imperdiet eu non erat. Integer mollis diam ac quam lobortis luctus. Suspendisse scelerisque sodales massa sit amet pharetra. <script type="math/tex">\Delta S = \pi</script><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> Donec cursus, velit in mollis dapibus, nunc elit pharetra erat, et dictum sem sapien pretium ligula. Cras nibh elit, mollis eu eleifend sed, faucibus in velit. Aliquam gravida tristique molestie. Donec gravida, diam ac auctor auctor, nulla enim varius sem, non auctor urna mi vitae enim. Cras aliquam semper nibh, quis viverra urna ultrices et. Nunc rhoncus fringilla dapibus.</p>

<p><img src="http://placekitten.com/720/250" /></p>

<h1 id="immortal-words">Immortal Words</h1>

<blockquote><p>Too many people have opinions on things they know nothing about. And the more ignorant they are, the more opinions they have.</p><footer><strong>Thomas Hildern</strong> <cite><a href="http://fallout.wikia.com/wiki/Thomas_Hildern">Fallout Wiki</a></cite></footer></blockquote>

<h2 id="the-meaning-of-life">The Meaning of Life</h2>

<p><img class="right" src="http://placekitten.com/150/100" title="Place Kitten #3" />
Aenean tristique, magna a semper venenatis, orci odio tempor lorem, ac molestie ligula enim ac urna. Fusce egestas nisl id massa porta vitae pretium tellus aliquet. Morbi tempor arcu sit amet felis hendrerit aliquam. Nulla facilisi. Suspendisse diam tortor, pharetra ac porta eu, ullamcorper nec lectus. Sed nulla turpis, blandit et tincidunt vel, <code>condimentum</code> et sapien. Aliquam dignissim blandit pharetra. Mauris ornare accumsan libero at bibendum. Morbi dui nisl, aliquet sit amet gravida sit amet, mollis commodo nulla. Quisque eu felis purus.</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
 \forall x, y : \mathbb{Z}, x > 3 \land y < 2 \Rightarrow x^2 - 2y > 5 %]]&gt;</script>

<p>Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi. In lectus nisl, semper ac imperdiet eu, ultricies luctus erat. Sed ultrices lectus in <code>massa tincidunt</code> fringilla. Aenean lectus tortor, tempus a sagittis vitae, hendrerit eget lacus.</p>

<h3 id="things-to-do">Things to do</h3>

<ul>
  <li>first do this</li>
  <li>then do this other thing</li>
  <li>then maybe, if you’re not tired, do this last thing</li>
</ul>

<p>Here it is numbered for you:</p>

<ol>
  <li>first do this</li>
  <li>then do this other thing</li>
  <li>then maybe, if you’re not tired, do this last thing</li>
</ol>

<p>As you can see, there’s lots of work to do! Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi. In lectus nisl, semper ac imperdiet eu, ultricies luctus erat. Sed ultrices lectus in <code>massa tincidunt</code> fringilla. Aenean lectus tortor, tempus a sagittis vitae, hendrerit eget lacus.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Cras nibh elit, mollis eu eleifend sed, faucibus in velit. <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>This is the awesome constant <a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
